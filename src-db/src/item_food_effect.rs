//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "ItemFoodEffect")]
pub struct Model {
    #[sea_orm(column_name = "Id", primary_key)]
    pub id: u32,
    #[sea_orm(column_name = "BaseParam")]
    pub base_param: u32,
    #[sea_orm(column_name = "Value")]
    pub value: i8,
    #[sea_orm(column_name = "Max")]
    pub max: i16,
    #[sea_orm(column_name = "ValueHQ")]
    pub value_hq: i8,
    #[sea_orm(column_name = "MaxHQ")]
    pub max_hq: i16,
    #[sea_orm(column_name = "ItemFoodId")]
    pub item_food_id: Option<u32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::item_food::Entity",
        from = "Column::ItemFoodId",
        to = "super::item_food::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    ItemFood,
}

impl Related<super::item_food::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ItemFood.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

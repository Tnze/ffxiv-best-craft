//! SeaORM Entity. Generated by sea-orm-codegen 0.9.2

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize)]
#[sea_orm(table_name = "Recipes")]
pub struct Model {
    #[sea_orm(column_name = "Id", primary_key)]
    pub id: i32,
    #[sea_orm(column_name = "Number")]
    pub number: i32,
    #[sea_orm(column_name = "CraftTypeId")]
    pub craft_type_id: Option<i32>,
    #[sea_orm(column_name = "RecipeLevel")]
    pub recipe_level: i32,
    #[sea_orm(column_name = "ItemResultId")]
    pub item_result_id: i32,
    #[sea_orm(column_name = "MaterialQualityFactor")]
    pub material_quality_factor: i32,
    #[sea_orm(column_name = "DifficultyFactor")]
    pub difficulty_factor: i32,
    #[sea_orm(column_name = "QualityFactor")]
    pub quality_factor: i32,
    #[sea_orm(column_name = "DurabilityFactor")]
    pub durability_factor: i32,
    #[sea_orm(column_name = "RequiredCraftsmanship")]
    pub required_craftsmanship: i32,
    #[sea_orm(column_name = "RequiredControl")]
    pub required_control: i32,
    #[sea_orm(column_name = "CanHq")]
    pub can_hq: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::item_with_amount::Entity",
        from = "Column::ItemResultId",
        to = "super::item_with_amount::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    ItemWithAmount,
    #[sea_orm(
        belongs_to = "super::craft_types::Entity",
        from = "Column::CraftTypeId",
        to = "super::craft_types::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    CraftTypes,
}

impl Related<super::item_with_amount::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ItemWithAmount.def()
    }
}

impl Related<super::craft_types::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CraftTypes.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.2

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "RecipeLevelTables")]
pub struct Model {
    #[sea_orm(column_name = "Id", primary_key)]
    pub id: i32,
    #[sea_orm(column_name = "ClassJobLevel")]
    pub class_job_level: i32,
    #[sea_orm(column_name = "SuggestedCraftsmanship")]
    pub suggested_craftsmanship: i32,
    #[sea_orm(column_name = "Difficulty")]
    pub difficulty: i32,
    #[sea_orm(column_name = "Quality")]
    pub quality: i32,
    #[sea_orm(column_name = "ProgressDivider")]
    pub progress_divider: i32,
    #[sea_orm(column_name = "QualityDivider")]
    pub quality_divider: i32,
    #[sea_orm(column_name = "ProgressModifier")]
    pub progress_modifier: i32,
    #[sea_orm(column_name = "QualityModifier")]
    pub quality_modifier: i32,
    #[sea_orm(column_name = "Durability")]
    pub durability: i32,
    #[sea_orm(column_name = "ConditionsFlag")]
    pub conditions_flag: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::recipes::Entity")]
    Recipes,
}

impl Related<super::recipes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Recipes.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
